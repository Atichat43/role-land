Domain Interface Documentation:
1. Identify Fields: 
  - List all the fields in the domain interface.
2. Data Types and Constraints:
  - Use **Bold** to highlight important constraints like data length or value limitations.
  - Use *Italic* to indicate default values or optional fields.
3. Validation and Relationships:
  - Use *validated* in Italic to indicate that a field is validated.
  - Use **OneToMany** and **ManyToMany** in Bold to indicate the type of relationship. Append with NO validation to specify that these fields are not validated. This is to align with the guideline that "- For OneToMany or ManyToMany relationships, avoid using @ValidateNested due to potential circular dependencies or performance issues. Handle validation in the service layer.
  - append `with validation` after OneToOne and ManyToOne relationships to indicate that these fields are validated.
4. Array Fields:
  - Indicate array fields with square brackets [] next to the field name.
5. Inheritance:
  - Use --- to separate the fields from the inherited interfaces.
  - Use `extends ...` in Inline Code to indicate what the interface extends.
6. Comments:
  - Use `//` to add inline comments for categorizing fields like `// value objects`, `// models` and `// aggregates`

Enum Type Documentation:
1. Identify Fields:
    - List all the fields in the enum type. explains its purpose and the meaning of each value.
2. Default Value:
    - Use --- to separate the fields from the default value.
    - Use `default: ...` in Inline Code to indicate the default value of the enum type.
